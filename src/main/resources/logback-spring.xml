<?xml version="1.0" encoding="UTF-8"?>
<!--
    Logback Configuration for Week 1 Homework: Basic AI Text Responder
    
    This configuration demonstrates proper logging setup for Spring Boot applications
    with AI integration. It provides educational examples of logging best practices,
    security considerations, and monitoring patterns.
    
    Educational Value:
    - Shows proper logging configuration structure
    - Demonstrates different log levels and their usage
    - Illustrates security-conscious logging (no sensitive data)
    - Teaches performance-aware logging patterns
    - Shows how to configure different outputs for different environments
    
    Key Principles:
    - Never log sensitive information (API keys, personal data)
    - Use appropriate log levels for different types of information
    - Configure different outputs for development vs production
    - Include contextual information for debugging
    - Balance detail with performance impact
-->
<configuration>
    
    <!-- =================================================================== -->
    <!-- PROPERTY DEFINITIONS                                                -->
    <!-- =================================================================== -->
    
    <!-- Application name for log identification -->
    <property name="APP_NAME" value="week1-homework-text-responder"/>
    
    <!-- Base log pattern with all essential information -->
    <property name="LOG_PATTERN" 
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"/>
    
    <!-- Simplified pattern for development -->
    <property name="SIMPLE_PATTERN" 
              value="%d{HH:mm:ss.SSS} %-5level %logger{20} - %msg%n"/>
    
    <!-- Log file location -->
    <property name="LOG_FILE" value="logs/${APP_NAME}"/>
    
    <!-- =================================================================== -->
    <!-- CONSOLE APPENDER (Development and Testing)                         -->
    <!-- =================================================================== -->
    
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${SIMPLE_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- Only log INFO and above to console to reduce noise -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>
    
    <!-- =================================================================== -->
    <!-- FILE APPENDER (Production and Debugging)                           -->
    <!-- =================================================================== -->
    
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_FILE}.log</file>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        
        <!-- Rolling policy to manage log file sizes and retention -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- Roll over daily and when file size exceeds 10MB -->
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>10MB</maxFileSize>
            <!-- Keep 30 days of logs -->
            <maxHistory>30</maxHistory>
            <!-- Total size cap of 1GB -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>
    
    <!-- =================================================================== -->
    <!-- ERROR FILE APPENDER (Critical Issues)                              -->
    <!-- =================================================================== -->
    
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_FILE}-error.log</file>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        
        <!-- Only log ERROR level messages -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}-error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>10MB</maxFileSize>
            <maxHistory>90</maxHistory> <!-- Keep error logs longer -->
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
    </appender>
    
    <!-- =================================================================== -->
    <!-- ASYNC APPENDERS (Performance Optimization)                         -->
    <!-- =================================================================== -->
    
    <!-- Async wrapper for file logging to improve performance -->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
        <!-- Queue size for async processing -->
        <queueSize>512</queueSize>
        <!-- Discard TRACE, DEBUG and INFO if queue is 80% full -->
        <discardingThreshold>80</discardingThreshold>
        <!-- Include caller information (more expensive but useful for debugging) -->
        <includeCallerData>false</includeCallerData>
    </appender>
    
    <!-- =================================================================== -->
    <!-- LOGGER CONFIGURATIONS                                               -->
    <!-- =================================================================== -->
    
    <!-- Application-specific logging -->
    <logger name="com.coherentsolutions.homework.week1" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </logger>
    
    <!-- Spring AI logging - Important for debugging AI integration -->
    <logger name="org.springframework.ai" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_FILE"/>
    </logger>
    
    <!-- HTTP client logging - Useful for debugging API calls -->
    <!-- WARNING: This may log sensitive data like API keys in headers -->
    <!-- Use with caution and disable in production -->
    <logger name="org.springframework.web.client" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_FILE"/>
    </logger>
    
    <!-- Spring Boot actuator logging -->
    <logger name="org.springframework.boot.actuate" level="INFO"/>
    
    <!-- Reduce noise from common frameworks -->
    <logger name="org.springframework.boot.autoconfigure" level="WARN"/>
    <logger name="org.springframework.boot.context" level="WARN"/>
    <logger name="org.hibernate" level="WARN"/>
    <logger name="org.apache.tomcat" level="INFO"/>
    <logger name="org.apache.catalina" level="INFO"/>
    
    <!-- =================================================================== -->
    <!-- ROOT LOGGER                                                         -->
    <!-- =================================================================== -->
    
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>
    
    <!-- =================================================================== -->
    <!-- PROFILE-SPECIFIC CONFIGURATIONS                                    -->
    <!-- =================================================================== -->
    
    <!-- Development profile: More verbose logging, console-focused -->
    <springProfile name="development">
        <logger name="com.coherentsolutions.homework.week1" level="DEBUG"/>
        <logger name="org.springframework.ai" level="DEBUG"/>
        <logger name="org.springframework.web.client" level="DEBUG"/>
        <root level="DEBUG"/>
    </springProfile>
    
    <!-- Test profile: Minimal logging to avoid test noise -->
    <springProfile name="test">
        <logger name="com.coherentsolutions.homework.week1" level="INFO"/>
        <logger name="org.springframework.ai" level="WARN"/>
        <logger name="org.springframework.web.client" level="WARN"/>
        <root level="WARN"/>
    </springProfile>
    
    <!-- Production profile: Optimized for performance and monitoring -->
    <springProfile name="production">
        <logger name="com.coherentsolutions.homework.week1" level="INFO"/>
        <logger name="org.springframework.ai" level="WARN"/>
        <logger name="org.springframework.web.client" level="WARN"/>
        <root level="INFO"/>
        
        <!-- In production, you might want to add:
             - JSON formatting for log aggregation
             - Additional appenders for monitoring systems
             - More restrictive error logging
             - Structured logging with MDC -->
    </springProfile>
    
</configuration>

<!--
=============================================================================
EDUCATIONAL NOTES FOR STUDENTS
=============================================================================

LOGGING BEST PRACTICES FOR AI APPLICATIONS:

1. SECURITY CONSIDERATIONS:
   - Never log API keys, tokens, or other sensitive credentials
   - Be careful with user prompts - they may contain personal information
   - Don't log full AI responses - they can be large and may contain sensitive data
   - Use log level filtering to control what gets written to persistent storage

2. PERFORMANCE CONSIDERATIONS:
   - Use async appenders for high-volume logging
   - Configure appropriate log rotation to manage disk space
   - Be selective about what you log at DEBUG level
   - Consider the cost of string formatting in hot paths

3. AI-SPECIFIC LOGGING STRATEGIES:
   - Log request metadata (prompt length, model used, timestamp)
   - Log response metadata (token usage, processing time)
   - Log error conditions for debugging API issues
   - Track usage patterns for cost optimization

4. DEBUGGING AIDS:
   - Include correlation IDs for tracing requests
   - Log before and after API calls with timing information
   - Include configuration information at startup
   - Log validation failures with context

5. MONITORING AND ALERTING:
   - Set up alerts on ERROR level logs
   - Monitor for specific error patterns (rate limiting, authentication)
   - Track API usage metrics through logs
   - Monitor response times and token usage

EXAMPLE LOGGING STATEMENTS IN YOUR CODE:

// Service layer - log request without sensitive data
log.debug("Processing text generation request: promptLength={}, model={}", 
          prompt.length(), modelName);

// Service layer - log successful response metadata
log.info("Text generation successful: responseLength={}, tokensUsed={}, processingTimeMs={}", 
         response.length(), tokensUsed, processingTime);

// Service layer - log errors with context
log.error("Text generation failed for prompt length {}: {}", 
          promptLength, e.getMessage(), e);

// Controller layer - log incoming requests
log.debug("Received POST /generate request from IP={}", 
          request.getRemoteAddr());

COMMON LOGGING MISTAKES TO AVOID:

1. Don't log the full prompt text (privacy and log volume)
2. Don't log API keys or tokens (security)
3. Don't use System.out.println() instead of proper logging
4. Don't log at ERROR level for expected business exceptions
5. Don't forget to configure log rotation (disk space)
6. Don't ignore performance impact of excessive DEBUG logging
7. Don't log in tight loops without rate limiting

PRODUCTION CONSIDERATIONS:

- Use structured logging (JSON) for better parsing
- Integrate with log aggregation systems (ELK, Splunk)
- Set up proper monitoring and alerting
- Consider privacy regulations when logging user data
- Implement log sanitization for sensitive information
- Use distributed tracing for microservices architectures
-->